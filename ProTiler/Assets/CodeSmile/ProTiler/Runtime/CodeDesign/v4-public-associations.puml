@startuml
struct "LinearDataChunk<TData>"<TData> <<struct>> {
}
struct "SparseDataChunk<TData>"<TData> <<struct>> {
}
interface ILinearDataMap {
}
interface ISparseDataMap {
}
abstract class DataMapBase {
    + <<virtual>> Serialize(writer:IBinaryWriter) : void
    + <<virtual>> Deserialize(reader:IBinaryReader) : DataMapBase
}
class "LinearDataMap<TData>"<TData> {
    + <<virtual>> TryGetChunk(key:ChunkKey, chunk:LinearDataChunk<TData>) : Boolean
}
class "SparseDataMap<TData>"<TData> {
    + <<virtual>> TryGetChunk(key:ChunkKey, chunk:SparseDataChunk<TData>) : Boolean
}
class "StreamingLinearDataMap<TData>"<TData> {
    + <<override>> TryGetChunk(key:ChunkKey, chunk:LinearDataChunk<TData>) : Boolean
}
class "StreamingSparseDataMap<TData>"<TData> {
    + <<override>> TryGetChunk(key:ChunkKey, chunk:SparseDataChunk<TData>) : Boolean
}
interface IBinaryReader {
    + ReadNext() : T
}
interface IBinaryWriter {
    + Add(value:T) : void
}
abstract class GridMapBase {
    + Add(dataMap:ILinearDataMap) : void
    + Add(dataMap:ISparseDataMap) : void
    + <<virtual>> Serialize(writer:IBinaryWriter) : void
    + <<virtual>> Deserialize(reader:IBinaryReader) : GridMapBase
}
class GridMapUndoRedo {
}
struct BinaryReader <<struct>> {
    + BinaryReader(reader:UnsafeAppendBuffer.Reader*)
    + ReadNext() : T
}
struct BinaryWriter <<struct>> {
    + BinaryWriter(writer:UnsafeAppendBuffer*)
    + Add(value:T) : void
}
class Serialize <<static>> {
    + {static} <<unsafe>> ToBinary(data:T, adapters:List<IBinaryAdapter>) : Byte[]
    + {static} <<unsafe>> FromBinary(bytes:Byte[], adapters:List<IBinaryAdapter>) : T
}
abstract class VersionedBinaryAdapter {
    + VersionedBinaryAdapter(version:Byte)
}
class "LinearDataChunkBinaryAdapter<TData>"<TData> <<sealed>> {
    + LinearDataChunkBinaryAdapter(version:Byte)
    + Serialize(context:BinarySerializationContext<LinearDataChunk<TData>>, value:LinearDataChunk<TData>) : void
    + Deserialize(context:BinaryDeserializationContext<LinearDataChunk<TData>>) : LinearDataChunk<TData>
}
class "SparseDataChunkBinaryAdapter<TData>"<TData> <<sealed>> {
    + SparseDataChunkBinaryAdapter(version:Byte)
    + Serialize(context:BinarySerializationContext<SparseDataChunk<TData>>, value:SparseDataChunk<TData>) : void
    + Deserialize(context:BinaryDeserializationContext<SparseDataChunk<TData>>) : SparseDataChunk<TData>
}
class "DataMapBinaryAdapter<TDataMap>"<TDataMap> <<sealed>> {
    + DataMapBinaryAdapter(version:Byte)
    + <<unsafe>> Serialize(context:BinarySerializationContext<TDataMap>, value:TDataMap) : void
    + <<unsafe>> Deserialize(context:BinaryDeserializationContext<TDataMap>) : TDataMap
}
class "GridMapBaseBinaryAdapter<TGridMap>"<TGridMap> <<sealed>> {
    + GridMapBaseBinaryAdapter(version:Byte)
    + <<unsafe>> Serialize(context:BinarySerializationContext<TGridMap>, value:TGridMap) : void
    + <<unsafe>> Deserialize(context:BinaryDeserializationContext<TGridMap>) : TGridMap
}
struct MyLinearTileData <<struct>> {
}
struct MyNavSparseTileData <<struct>> {
}
struct MyVisSparseTileData <<struct>> {
}
class Tilemap3D {
    + Tilemap3D()
    + <<override>> Serialize(writer:IBinaryWriter) : void
    + <<override>> Deserialize(reader:IBinaryReader) : GridMapBase
}
struct MyLinearVoxelData <<struct>> {
}
struct MySparseVoxelData <<struct>> {
}
class VoxelMap {
    + VoxelMap()
    + <<override>> Serialize(writer:IBinaryWriter) : void
    + <<override>> Deserialize(reader:IBinaryReader) : GridMapBase
}
class "SaveLoadExample<TGridMap,TLinearData,TSparseData>"<TGridMap,TLinearData,TSparseData> <<sealed>> {
    + SerializeGridMap(map:GridMapBase) : Byte[]
    + DeserializeGridMap(bytes:Byte[]) : GridMapBase
}
class "UnsafeList<TData>"<TData> {
}
class "UnsafeParallelHashMap<ChunkSize,TData>"<ChunkSize,TData> {
}
class "IBinaryAdapter<LinearDataChunk<TData>>"<LinearDataChunk<TData>> {
}
class "IBinaryAdapter<SparseDataChunk<TData>>"<SparseDataChunk<TData>> {
}
class "IBinaryAdapter<TDataMap>"<TDataMap> {
}
class "IBinaryAdapter<TGridMap>"<TGridMap> {
}
class "List<IBinaryAdapter>"<IBinaryAdapter> {
}
"LinearDataChunk<TData>" --> "linearData<TData>" "UnsafeList<TData>"
"SparseDataChunk<TData>" --> "sparseData<ChunkSize,TData>" "UnsafeParallelHashMap<ChunkSize,TData>"
DataMapBase <|-- "LinearDataMap<TData>"
ILinearDataMap <|-- "LinearDataMap<TData>"
DataMapBase <|-- "SparseDataMap<TData>"
ISparseDataMap <|-- "SparseDataMap<TData>"
"LinearDataMap<TData>" "<TData>" <|-- "StreamingLinearDataMap<TData>"
"SparseDataMap<TData>" "<TData>" <|-- "StreamingSparseDataMap<TData>"
IBinaryReader <|-- BinaryReader
IBinaryWriter <|-- BinaryWriter
VersionedBinaryAdapter <|-- "LinearDataChunkBinaryAdapter<TData>"
"IBinaryAdapter<LinearDataChunk<TData>>" "<LinearDataChunk<TData>>" <|-- "LinearDataChunkBinaryAdapter<TData>"
VersionedBinaryAdapter <|-- "SparseDataChunkBinaryAdapter<TData>"
"IBinaryAdapter<SparseDataChunk<TData>>" "<SparseDataChunk<TData>>" <|-- "SparseDataChunkBinaryAdapter<TData>"
VersionedBinaryAdapter <|-- "DataMapBinaryAdapter<TDataMap>"
"IBinaryAdapter<TDataMap>" "<TDataMap>" <|-- "DataMapBinaryAdapter<TDataMap>"
VersionedBinaryAdapter <|-- "GridMapBaseBinaryAdapter<TGridMap>"
"IBinaryAdapter<TGridMap>" "<TGridMap>" <|-- "GridMapBaseBinaryAdapter<TGridMap>"
MyLinearTileData --> "TileIndex" UInt16
MyNavSparseTileData --> "NavigationFlags" UInt32
MyNavSparseTileData --> "AIStateFlags" UInt16
MyVisSparseTileData --> "RenderFlags" UInt16
MyVisSparseTileData --> "TileFlags" Byte
GridMapBase <|-- Tilemap3D
MyLinearVoxelData --> "ColorIndex" Byte
MySparseVoxelData --> "InteractionFlags" Byte
MySparseVoxelData --> "RenderFlags" Byte
GridMapBase <|-- VoxelMap
"SaveLoadExample<TGridMap,TLinearData,TSparseData>" --> "GridMapAdapters<IBinaryAdapter>" "List<IBinaryAdapter>"
@enduml

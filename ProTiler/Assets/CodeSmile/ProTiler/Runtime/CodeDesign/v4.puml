@startuml
struct "LinearDataChunk<TData>"<TData> <<struct>> {
    + linearData : UnsafeList<TData>
}
struct "SparseDataChunk<TData>"<TData> <<struct>> {
    + sparseData : UnsafeParallelHashMap<ChunkSize, TData>
}
interface ILinearDataMap {
}
interface ISparseDataMap {
}
abstract class "DataMapBase<TData>"<TData> {
}
class "LinearDataMap<TData>"<TData> {
    # m_DataChunks : NativeParallelHashMap<ChunkKey, LinearDataChunk<TData>>
    + <<virtual>> TryGetChunk(key:ChunkKey, chunk:LinearDataChunk<TData>) : Boolean
}
class "SparseDataMap<TData>"<TData> {
    # sparseChunks : NativeParallelHashMap<ChunkKey, SparseDataChunk<TData>>
    + <<virtual>> TryGetChunk(key:ChunkKey, chunk:SparseDataChunk<TData>) : Boolean
}
class "StreamingLinearDataMap<TData>"<TData> {
    + <<override>> TryGetChunk(key:ChunkKey, chunk:LinearDataChunk<TData>) : Boolean
}
class "StreamingSparseDataMap<TData>"<TData> {
    + <<override>> TryGetChunk(key:ChunkKey, chunk:SparseDataChunk<TData>) : Boolean
}
interface IBinaryReader {
    + ReadNext() : T
}
interface IBinaryWriter {
    + Add(value:T) : void
}
abstract class GridMapBase {
    - <<readonly>> m_LinearMaps : List<ILinearDataMap>
    - <<readonly>> m_SparseMaps : List<ISparseDataMap>
    - m_ChunkSize : ChunkSize
    + Add(dataMap:ILinearDataMap) : void
    + Add(dataMap:ISparseDataMap) : void
    + <<virtual>> Serialize(writer:IBinaryWriter) : void
    + <<virtual>> Deserialize(reader:IBinaryReader) : GridMapBase
}
class GridMapUndoRedo {
}
struct BinaryReader <<struct>> {
    - <<readonly>> m_Reader : UnsafeAppendBuffer.Reader*
    + BinaryReader(reader:UnsafeAppendBuffer.Reader*)
    + ReadNext() : T
}
struct BinaryWriter <<struct>> {
    - <<readonly>> m_Writer : UnsafeAppendBuffer*
    + BinaryWriter(writer:UnsafeAppendBuffer*)
    + Add(value:T) : void
}
struct MyLinearTileData <<struct>> {
    + TileIndex : UInt16
}
struct MyNavSparseTileData <<struct>> {
    + NavigationFlags : UInt32
    + AIStateFlags : UInt16
}
struct MyVisSparseTileData <<struct>> {
    + RenderFlags : UInt16
    + TileFlags : Byte
}
class Tilemap3D {
    + Tilemap3D()
    + <<override>> Serialize(writer:IBinaryWriter) : void
    + <<override>> Deserialize(reader:IBinaryReader) : GridMapBase
}
struct MyLinearVoxelData <<struct>> {
    + ColorIndex : Byte
}
struct MySparseVoxelData <<struct>> {
    + InteractionFlags : Byte
    + RenderFlags : Byte
}
class VoxelMap {
    + VoxelMap()
    + <<override>> Serialize(writer:IBinaryWriter) : void
    + <<override>> Deserialize(reader:IBinaryReader) : GridMapBase
}
"DataMapBase<TData>" "<TData>" <|-- "LinearDataMap<TData>"
ILinearDataMap <|-- "LinearDataMap<TData>"
"DataMapBase<TData>" "<TData>" <|-- "SparseDataMap<TData>"
ISparseDataMap <|-- "SparseDataMap<TData>"
"LinearDataMap<TData>" "<TData>" <|-- "StreamingLinearDataMap<TData>"
"SparseDataMap<TData>" "<TData>" <|-- "StreamingSparseDataMap<TData>"
IBinaryReader <|-- BinaryReader
IBinaryWriter <|-- BinaryWriter
GridMapBase <|-- Tilemap3D
GridMapBase <|-- VoxelMap
@enduml

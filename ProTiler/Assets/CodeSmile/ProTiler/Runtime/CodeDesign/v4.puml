@startuml
struct "LinearDataChunk<TData>"<TData> <<struct>> {
    + linearData : UnsafeList<TData>
}
struct "SparseDataChunk<TData>"<TData> <<struct>> {
    + sparseData : UnsafeParallelHashMap<ChunkSize, TData>
}
interface ILinearDataMap {
}
interface ISparseDataMap {
}
abstract class DataMapBase {
    + <<virtual>> Serialize(writer:IBinaryWriter) : void
    + <<virtual>> Deserialize(reader:IBinaryReader) : DataMapBase
}
class "LinearDataMap<TData>"<TData> {
    # m_DataChunks : NativeParallelHashMap<ChunkKey, LinearDataChunk<TData>>
    + <<virtual>> TryGetChunk(key:ChunkKey, chunk:LinearDataChunk<TData>) : Boolean
}
class "SparseDataMap<TData>"<TData> {
    # sparseChunks : NativeParallelHashMap<ChunkKey, SparseDataChunk<TData>>
    + <<virtual>> TryGetChunk(key:ChunkKey, chunk:SparseDataChunk<TData>) : Boolean
}
class "StreamingLinearDataMap<TData>"<TData> {
    + <<override>> TryGetChunk(key:ChunkKey, chunk:LinearDataChunk<TData>) : Boolean
}
class "StreamingSparseDataMap<TData>"<TData> {
    + <<override>> TryGetChunk(key:ChunkKey, chunk:SparseDataChunk<TData>) : Boolean
}
interface IBinaryReader {
    + ReadNext() : T
}
interface IBinaryWriter {
    + Add(value:T) : void
}
abstract class GridMapBase {
    - <<readonly>> m_LinearMaps : List<ILinearDataMap>
    - <<readonly>> m_SparseMaps : List<ISparseDataMap>
    - m_ChunkSize : ChunkSize
    + Add(dataMap:ILinearDataMap) : void
    + Add(dataMap:ISparseDataMap) : void
    + <<virtual>> Serialize(writer:IBinaryWriter) : void
    + <<virtual>> Deserialize(reader:IBinaryReader) : GridMapBase
}
class GridMapUndoRedo {
}
struct BinaryReader <<struct>> {
    - <<readonly>> m_Reader : UnsafeAppendBuffer.Reader*
    + BinaryReader(reader:UnsafeAppendBuffer.Reader*)
    + ReadNext() : T
}
struct BinaryWriter <<struct>> {
    - <<readonly>> m_Writer : UnsafeAppendBuffer*
    + BinaryWriter(writer:UnsafeAppendBuffer*)
    + Add(value:T) : void
}
class Serialize <<static>> {
    + {static} <<unsafe>> ToBinary(data:T, adapters:List<IBinaryAdapter>) : Byte[]
    + {static} <<unsafe>> FromBinary(bytes:Byte[], adapters:List<IBinaryAdapter>) : T
}
abstract class BinaryAdapterBase {
    # Version : Byte <<get>> <<set>>
    + BinaryAdapterBase(version:Byte)
    # <<unsafe>> WriteVersion(writer:UnsafeAppendBuffer*) : void
    # <<unsafe>> ReadVersion(reader:UnsafeAppendBuffer.Reader*) : void
}
class "LinearDataChunkBinaryAdapter<TData>"<TData> <<sealed>> {
    + LinearDataChunkBinaryAdapter(version:Byte)
    + Serialize(context:BinarySerializationContext<LinearDataChunk<TData>>, value:LinearDataChunk<TData>) : void
    + Deserialize(context:BinaryDeserializationContext<LinearDataChunk<TData>>) : LinearDataChunk<TData>
}
class "SparseDataChunkBinaryAdapter<TData>"<TData> <<sealed>> {
    + SparseDataChunkBinaryAdapter(version:Byte)
    + Serialize(context:BinarySerializationContext<SparseDataChunk<TData>>, value:SparseDataChunk<TData>) : void
    + Deserialize(context:BinaryDeserializationContext<SparseDataChunk<TData>>) : SparseDataChunk<TData>
}
class "DataMapBinaryAdapter<TDataMap>"<TDataMap> <<sealed>> {
    + DataMapBinaryAdapter(version:Byte)
    + <<unsafe>> Serialize(context:BinarySerializationContext<TDataMap>, value:TDataMap) : void
    + <<unsafe>> Deserialize(context:BinaryDeserializationContext<TDataMap>) : TDataMap
}
class "GridMapBaseBinaryAdapter<TGridMap>"<TGridMap> <<sealed>> {
    + GridMapBaseBinaryAdapter(version:Byte)
    + <<unsafe>> Serialize(context:BinarySerializationContext<TGridMap>, value:TGridMap) : void
    + <<unsafe>> Deserialize(context:BinaryDeserializationContext<TGridMap>) : TGridMap
}
struct MyLinearTileData <<struct>> {
    + TileIndex : UInt16
}
struct MyNavSparseTileData <<struct>> {
    + NavigationFlags : UInt32
    + AIStateFlags : UInt16
}
struct MyVisSparseTileData <<struct>> {
    + RenderFlags : UInt16
    + TileFlags : Byte
}
class Tilemap3D {
    + Tilemap3D()
    + <<override>> Serialize(writer:IBinaryWriter) : void
    + <<override>> Deserialize(reader:IBinaryReader) : GridMapBase
}
struct MyLinearVoxelData <<struct>> {
    + ColorIndex : Byte
}
struct MySparseVoxelData <<struct>> {
    + InteractionFlags : Byte
    + RenderFlags : Byte
}
class VoxelMap {
    + VoxelMap()
    + <<override>> Serialize(writer:IBinaryWriter) : void
    + <<override>> Deserialize(reader:IBinaryReader) : GridMapBase
}
class "SaveLoadExample<TGridMap,TLinearData,TSparseData>"<TGridMap,TLinearData,TSparseData> <<sealed>> {
    - s_GridMapAdapters : List<IBinaryAdapter>
    + GridMapAdapters : List<IBinaryAdapter> <<get>> <<set>>
    + SerializeGridMap(map:GridMapBase) : Byte[]
    + DeserializeGridMap(bytes:Byte[]) : GridMapBase
}
DataMapBase <|-- "LinearDataMap<TData>"
ILinearDataMap <|-- "LinearDataMap<TData>"
DataMapBase <|-- "SparseDataMap<TData>"
ISparseDataMap <|-- "SparseDataMap<TData>"
"LinearDataMap<TData>" "<TData>" <|-- "StreamingLinearDataMap<TData>"
"SparseDataMap<TData>" "<TData>" <|-- "StreamingSparseDataMap<TData>"
IBinaryReader <|-- BinaryReader
IBinaryWriter <|-- BinaryWriter
BinaryAdapterBase <|-- "LinearDataChunkBinaryAdapter<TData>"
"IBinaryAdapter<LinearDataChunk<TData>>" "<LinearDataChunk<TData>>" <|-- "LinearDataChunkBinaryAdapter<TData>"
BinaryAdapterBase <|-- "SparseDataChunkBinaryAdapter<TData>"
"IBinaryAdapter<SparseDataChunk<TData>>" "<SparseDataChunk<TData>>" <|-- "SparseDataChunkBinaryAdapter<TData>"
BinaryAdapterBase <|-- "DataMapBinaryAdapter<TDataMap>"
"IBinaryAdapter<TDataMap>" "<TDataMap>" <|-- "DataMapBinaryAdapter<TDataMap>"
BinaryAdapterBase <|-- "GridMapBaseBinaryAdapter<TGridMap>"
"IBinaryAdapter<TGridMap>" "<TGridMap>" <|-- "GridMapBaseBinaryAdapter<TGridMap>"
GridMapBase <|-- Tilemap3D
GridMapBase <|-- VoxelMap
@enduml

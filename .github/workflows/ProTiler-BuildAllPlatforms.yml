name: ProTiler - Test & Build All

on: workflow_dispatch

jobs:

  testAllModes:
    name: ${{ matrix.unityVersion }}-${{ matrix.testMode }} Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - ProTiler
        unityVersion:
          - 2022.2.15f1
          #- 2021.2.0f1
        testMode:
          - EditMode
          - PlayMode
          
    steps:
      # Checkout
      - uses: actions/checkout@v3
        with:
          lfs: true
          
      # Cache
      - uses: actions/cache@v3
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-Tests
          restore-keys: |
            Library-${{ matrix.projectPath }}-Tests

      # Run Tests
      - uses: game-ci/unity-test-runner@v2
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          projectPath: ${{ matrix.projectPath }}
          testMode: ${{ matrix.testMode }}
          unityVersion: ${{ matrix.unityVersion }}
          artifactsPath: artifacts-${{ matrix.unityVersion }}-${{ matrix.testMode }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: ${{ matrix.unityVersion }}-${{ matrix.testMode }} Test Results
          coverageOptions: 'useProjectSettings;generateHtmlReport;generateBadgeReport;generateAdditionalMetrics'
      
      # Artifacts
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Test results for ${{ matrix.unityVersion }}-${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.artifactsPath }}
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Coverage results for ${{ matrix.unityVersion }}-${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.coveragePath }}

  buildAllSupportedPlatforms:
    needs: testAllModes
    name: ${{ matrix.unityVersion }}-${{ matrix.targetPlatform }} Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - ProTiler
        unityVersion:
          - 2022.2.15f1
          #- 2021.2.0f1
        targetPlatform:
          - Android # Build an Android .apk standalone app.
          - iOS # Build an iOS player.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows # Build a Windows standalone.
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - WebGL # WebGL.
    
    steps:
      # Checkout
      - name: Checkout Files
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
          
      # Cache
      - name: Cache Library
        uses: actions/cache@v3
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
            Library-${{ matrix.projectPath }}-

      # Build
      - name: Build ${{ matrix.targetPlatform }}
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          projectPath: ${{ matrix.projectPath }}
          targetPlatform: ${{ matrix.targetPlatform }}
          unityVersion: ${{ matrix.unityVersion }}
          versioning: Semantic
          buildName: ${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-${{ matrix.unityVersion }}
          buildsPath: build/${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-${{ matrix.unityVersion }}
      
      # Output
      - name: Create Output for ${{ matrix.targetPlatform }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-${{ matrix.unityVersion }}
          path: build/${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-${{ matrix.unityVersion }}

#  buildWebGL:
#    needs: testRunner
#    name: Build for WebGL 🖥️
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Create LFS file list
#        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
#
#      - name: Restore LFS cache
#        uses: actions/cache@v2
#        id: lfs-cache
#        with:
#          path: .git/lfs
#          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
#
#      - name: Git LFS Pull
#        run: |
#          git lfs pull
#          git add .
#          git reset --hard
#
#      - name: Restore Library cache
#        uses: actions/cache@v2
#        with:
#          path: ProTiler/Library
#          key: Library-build-WebGL
#          restore-keys: |
#            Library-build-
#            Library-
#
#      - uses: webbertakken/unity-builder@v2
#        with:
#          targetPlatform: WebGL
#
#      - uses: actions/upload-artifact@v2
#        with:
#          name: build-WebGL
#          path: build/WebGL

#  deployPages:
#    needs: buildWebGL
#    name: Deploy to Github Pages 🚀
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - uses: actions/download-artifact@v2
#        with:
#          name: build-WebGL
#          path: ProTiler/Builds
#
#      - name: Display structure of root files
#        run: ls -R
#        working-directory: ProTiler/Builds/WebGL
#
#      - name: Deploy 🚀
#        uses: JamesIves/github-pages-deploy-action@4.1.4
#        with:
#          branch: gh-pages
#          folder: ProTiler/Builds/WebGL